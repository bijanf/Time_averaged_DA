C>======================================================================
C> @brief Reads or writes a restart file.
C> Initialized commons: DYNSP1, SFCANOM if TASK='read' & SPACE='spec'  
C> @usage
C> @note Spectral restart files are currently disabled.
C> they  have the date and model variables
!        WRITE (10) IYEAR, IMONTH                                       !TM
!         WRITE (10) IYEAR, IMONTH, IDAY, IHOUR                         !TM
C--   1. Read the restart dataset corresponding to the specified initial date
C      ! [Modified:] Read the restart dataset for any initial date       !TM

C> @note Spectral restart files have only 1 time steps as opposed to
C> gridded ones, which have 2. As a consequence starting from a gridded
C> state it is always necessary to perform a Euler Forward step (STEPONE)
C> before doing leapfrogstep
c   --   4. Start from a gridded restart file in sigma levels
C--                                       with 1 time step
C--   3. Start from a spectral restart file in sigma levels
C--                                       with 2 time steps
C>  
C> @param[in]  TASK  = 'read' | 'save'
C> @param[in]  SPACE = 'spec' | 'grid'
C> @return     0 if successful or 1 if failed
C=======================================================================
      SUBROUTINE RESTART (TASK,SPACE)

      include "atparam.h"
      include "atparam1.h"

      include "com_dynvar.h"
      include "com_anomvar.h"

      include "com_date.h"
      include "com_tsteps.h"

      CHARACTER(4),INTENT(IN) :: TASK, SPACE

      IF ((TASK.EQ.'read').AND.(SPACE.EQ.'spec')) THEN

        PRINT*,'Reading spectral restart file fort.3' ! with 2 time steps

c        READ (3,END=200) IYEAR, IMONTH, IDAY, IHOUR
        READ (3) IYEAR, IMONTH, IDAY, IHOUR
        READ (3) VOR
        READ (3) DIV
        READ (3) T
        READ (3) PS
        READ (3) TR

        READ (3) STANOM

      ELSE IF ((TASK.EQ.'save').AND.(SPACE.EQ.'spec'))  THEN

        PRINT*,'Saving spectral restart file fort.10' ! with 2 time steps           

        WRITE (10) IYEAR, IMONTH, IDAY, IHOUR
        WRITE (10) VOR
        WRITE (10) DIV
        WRITE (10) T
        WRITE (10) PS
        WRITE (10) TR

        WRITE (10) STANOM

      ELSE IF ((TASK.EQ.'read').AND.(SPACE.EQ.'grid'))  THEN

C       Setting filenames
        rst_name = itime_str//'_grid_'//z_coord//'_'//time_kind//'.rst'

        PRINT *, 'Reading Gridded restart file ', rst_name ! with 1 time steps  
     
         z_coord   = 'sigma'
         time_kind = 'Insta'
         rst_name = itime_str//'_grid_'//z_coord//'_'//time_kind//'.rst'
        PRINT *, 'reading Gridded Binary ', rst_name


         OPEN (90,FILE = itime_str//'',
     &            FORM ='UNFORMATTED',ACCESS='DIRECT',RECL=4*NGP)    
         irec=1
         DO K=KX,1,-1
            READ (90,REC=irec) ( UGR4(j,k),j=1,NGP)
            irec=irec+1
         END DO
         DO K=KX,1,-1
            READ (90,REC=irec) ( VGR4(j,k),j=1,NGP)
            irec=irec+1
         END DO
         DO K=KX,1,-1
            READ (90,REC=irec) ( TGR4(j,k),j=1,NGP)
            irec=irec+1
         END DO
         DO K=KX,1,-1
            READ (90,REC=irec) ( QGR4(j,k),j=1,NGP)
            irec=irec+1
         END DO
         READ    (90,REC=irec) (PSGR4(j)  ,j=1,NGP)
         CLOSE   (90)

C--      1.2 Conversion from single prec. gridded vars to double prec. ones 

          UGR =  UGR4
          VGR =  VGR4
          TGR =  TGR4
          QGR =  QGR4 *1.0d3
         PSGR = PSGR4
         PSGR = log(PSGR/P0)

C--      Monitoring         
         if(iitest==1) PRINT *,' UGR  :',MINVAL( UGR) ,MAXVAL (UGR)
         if(iitest==1) PRINT *,' VGR  :',MINVAL( VGR) ,MAXVAL (VGR)
         if(iitest==1) PRINT *,' TGR  :',MINVAL( TGR) ,MAXVAL (TGR)
         if(iitest==1) PRINT *,' QGR  :',MINVAL( QGR) ,MAXVAL (QGR)
         if(iitest==1) PRINT *,' PSGR :',MINVAL(PSGR) ,MAXVAL(PSGR)

C--      1.3 Conversion from gridded variable to spectral variable

         DO K=1,KX
             CALL VDSPEC(UGR(1,K),VGR(1,K),VOR(1,1,K,1),DIV(1,1,K,1),2)
             
             IF(IX.EQ.IY*4) THEN
                 CALL TRUNCT(VOR(1,1,K,1))
                 CALL TRUNCT(DIV(1,1,K,1))
             END IF
             
             CALL SPEC(TGR(1,K),T(1,1,K,1))
             CALL SPEC(QGR(1,K),TR(1,1,K,1,1))
             
         END DO
         CALL SPEC(PSGR(1),PS(1,1,1))      
      
c        CALL DIAGNS (1,0)





      ELSE

C--   3. Write end-of-data flag to the restart file

C         IZERO=0
C         WRITE (10) IZERO, IZERO

      ENDIF
C--
      RETURN

C--   4. Stop integration if restart file is not found

  200 CONTINUE

      print*, ' No restart dataset for the specified initial date'

      STOP 'invalid restart'

C--
      END

